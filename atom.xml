<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HUI</title>
  
  <subtitle>Blog of HUI</subtitle>
  <link href="https://xiaohuiluo.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaohuiluo.github.io/"/>
  <updated>2025-01-23T02:52:37.891Z</updated>
  <id>https://xiaohuiluo.github.io/</id>
  
  <author>
    <name>HUI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Skyfield&amp;Orekit中SGP4轨道位置计算及卫星网络仿真中应用</title>
    <link href="https://xiaohuiluo.github.io/2025/01/23/skyfield-and-orekit/"/>
    <id>https://xiaohuiluo.github.io/2025/01/23/skyfield-and-orekit/</id>
    <published>2025-01-23T02:48:12.000Z</published>
    <updated>2025-01-23T02:52:37.891Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何基于Skyfield&amp;Orekit中SGP4轨道位置计算并简单讨论其在卫星网络仿真中应用。</p><span id="more"></span><h2 id="sgp4"><a class="markdownIt-Anchor" href="#sgp4"></a> SGP4</h2><p>TLE(Two-line element set)轨道根数对应的计算模型是<a href="https://en.wikipedia.org/wiki/Simplified_perturbations_models">简化普适模型</a>(simplified perturbations models,包括SGP, SGP4, SDP4, SGP8 and SDP8),SGP(Simplified General Perturbations)简化摄动模型适用轨道周期小于225分钟的近地物体,SDP(Simplified Deep Space Perturbations)简化深空摄动模型适用于轨道周期大于 225 分钟的物体。</p><p>SGP4 模型星历误差大约1km并且每天增长大约1–3km误差。最初的 SGP 模型由 <a href="https://en.wikipedia.org/wiki/Yoshihide_Kozai" title="小斋义英">Kozai</a> 于 1959 年开发，由 Hilton &amp; Kuhlman 于 1966 年完善，最初由National Space Surveillance Control Center（以及后来的<a href="https://en.wikipedia.org/wiki/United_States_Space_Surveillance_Network" title="United States Space Surveillance Network">United States Space Surveillance Network</a>)）用于跟踪轨道上的物体，SDP4模型在历元上的误差为10公里。</p><p>SGP4模型具体算法请自行研究，本人不做天文研究仅利用该模型做位置预测，卫星网络仿真可能能应用上。</p><h2 id="skyfieldorekit"><a class="markdownIt-Anchor" href="#skyfieldorekit"></a> Skyfield&amp;Orekit</h2><p><a href="https://rhodesmill.org/skyfield/">Skyfield</a>是一个优雅的天文学Python软件包，Skyfield 可用于计算恒星、行星、 以及绕地球轨道运行的卫星。 Skyfield中提供了SGP4模型相关API，基于相关api可用来预测卫星位置。Skyfield根据MIT License开源分发。</p><p><a href="https://www.orekit.org/">Orekit</a>)是一个用 Java 编写的低级空间动力学库，自 2008 年以开源许可证发布以来，获得了广泛的认可。Orekit 旨在为飞行动力学应用的开发提供准确、高效的低级组件。Orekit 根据Apache License version 2.0开源分发。另外社区维护了一个 Python 包装器<a href="https://gitlab.orekit.org/orekit-labs/python-wrapper/">orekit-python-wrapper</a>，可基于Python使用Orekit API。</p><h2 id="坐标系"><a class="markdownIt-Anchor" href="#坐标系"></a> 坐标系</h2><p>对卫星进行轨道位置计算需要使用到如下天文相关坐标系统：<br />ECI(Earth-Centered, Inertial/地心惯性坐标系)坐标系统，ECEF(Earth-centered, Earth-fixed/地心地固坐标系)坐标系统及WGS84经纬度。</p><p>ECEF与ECI坐标系有着相同的坐标原点和z轴定义,但ECEF坐标系是与地球保持同步旋转。</p><p>ITRS(International Terrestrial Reference System/国际地球参考系统)是一种ECEF，不受地球自转、地球赤道扭曲等影响，因此可以更精确地反映地球表面的物理位置。</p><p>ITRF(International Terrestrial Reference Frame/国际地球参考框架是ITRS的一个实现。</p><p>地表物理位置唯一的WGS84经纬度坐标可转化为唯一的ITRS坐标，通常可用于定位卫星地面站。</p><p>PS：具体坐标系相关详细标准请自行查阅。</p><h2 id="skyfield-sgp4轨道位置计算"><a class="markdownIt-Anchor" href="#skyfield-sgp4轨道位置计算"></a> Skyfield SGP4轨道位置计算</h2><p>如下以STARLINK-1007卫星为例，计算当前卫星ECI坐标，ECEF坐标及WGS84经纬度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">from</span> sgp4.api <span class="keyword">import</span> Satrec, WGS84 </span><br><span class="line"><span class="keyword">from</span> skyfield.api <span class="keyword">import</span> EarthSatellite</span><br><span class="line"><span class="keyword">from</span> skyfield.api <span class="keyword">import</span> load <span class="keyword">as</span> skyfield_load </span><br><span class="line"><span class="keyword">from</span> skyfield.api <span class="keyword">import</span> wgs84</span><br><span class="line"><span class="keyword">from</span> skyfield <span class="keyword">import</span> framelib</span><br><span class="line"></span><br><span class="line">ts = skyfield_load.timescale(builtin=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Satellite</span>():</span><br><span class="line">    <span class="built_in">id</span> = <span class="number">0</span></span><br><span class="line">    name = <span class="string">&quot;&quot;</span></span><br><span class="line">    tle_line1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    tle_line2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    sat = <span class="literal">None</span></span><br><span class="line">    sw_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    sw_dpid = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, line0, line1, line2</span>):</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line">        self.name = line0</span><br><span class="line">        self.tle_line1 = line1</span><br><span class="line">        self.tle_line2 = line2</span><br><span class="line"></span><br><span class="line">        satrec = Satrec.twoline2rv(line1, line2, WGS84)</span><br><span class="line">        self.sat = EarthSatellite.from_satrec(satrec, ts)</span><br><span class="line">        <span class="built_in">print</span>(self.sat)</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">frame_now</span>(<span class="params">self</span>):</span><br><span class="line">        sat_obj = self.sat.at(ts.now())</span><br><span class="line">        <span class="comment"># ECI coords are True Equator and Equinox of date (Geocentric Celestial Reference System)</span></span><br><span class="line">        position = sat_obj.position.km</span><br><span class="line">        velocity = sat_obj.velocity.km_per_s</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add ECEF values to instrument.</span></span><br><span class="line">        <span class="comment"># ECEF coords are International Terrestrial Reference System (ITRS)</span></span><br><span class="line">        ecef = sat_obj.frame_xyz_and_velocity(framelib.itrs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Convert to geocentric latitude, longitude, altitude.</span></span><br><span class="line">        lat, lon = wgs84.latlon_of(sat_obj)</span><br><span class="line">        alt = wgs84.height_of(sat_obj).km</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;position_eci_x&#x27;</span>: position[<span class="number">0</span>],</span><br><span class="line">                <span class="string">&#x27;position_eci_y&#x27;</span>: position[<span class="number">1</span>],</span><br><span class="line">                <span class="string">&#x27;position_eci_z&#x27;</span>: position[<span class="number">2</span>],</span><br><span class="line">                <span class="string">&#x27;velocity_eci_x&#x27;</span>: velocity[<span class="number">0</span>],</span><br><span class="line">                <span class="string">&#x27;velocity_eci_y&#x27;</span>: velocity[<span class="number">1</span>],</span><br><span class="line">                <span class="string">&#x27;velocity_eci_z&#x27;</span>: velocity[<span class="number">2</span>],</span><br><span class="line">                <span class="string">&#x27;position_ecef_x&#x27;</span>: ecef[<span class="number">0</span>].km[<span class="number">0</span>],</span><br><span class="line">                <span class="string">&#x27;position_ecef_y&#x27;</span>: ecef[<span class="number">0</span>].km[<span class="number">1</span>],</span><br><span class="line">                <span class="string">&#x27;position_ecef_z&#x27;</span>: ecef[<span class="number">0</span>].km[<span class="number">2</span>],</span><br><span class="line">                <span class="string">&#x27;velocity_ecef_x&#x27;</span>: ecef[<span class="number">1</span>].km_per_s[<span class="number">0</span>],</span><br><span class="line">                <span class="string">&#x27;velocity_ecef_y&#x27;</span>: ecef[<span class="number">1</span>].km_per_s[<span class="number">1</span>],</span><br><span class="line">                <span class="string">&#x27;velocity_ecef_z&#x27;</span>: ecef[<span class="number">1</span>].km_per_s[<span class="number">2</span>],</span><br><span class="line">                <span class="string">&#x27;geod_latitude&#x27;</span>: lat.degrees,</span><br><span class="line">                <span class="string">&#x27;geod_longitude&#x27;</span>: lon.degrees,</span><br><span class="line">                <span class="string">&#x27;geod_altitude&#x27;</span>: alt&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    line0 = <span class="string">&quot;STARLINK-1007&quot;</span></span><br><span class="line">    line1 = <span class="string">&quot;1 44713U 19074A   24120.93093052  .00013004  00000+0  89012-3 0  9990&quot;</span></span><br><span class="line">    line2 = <span class="string">&quot;2 44713  53.0547 353.6824 0001286  89.2500 270.8636 15.06406908246617&quot;</span></span><br><span class="line"></span><br><span class="line">    sat = Satellite(<span class="number">0</span>, line0, line1, line2)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        frame_data = sat.frame_now()</span><br><span class="line"></span><br><span class="line">        x = frame_data[<span class="string">&#x27;position_ecef_x&#x27;</span>]</span><br><span class="line">        y = frame_data[<span class="string">&#x27;position_ecef_y&#x27;</span>]</span><br><span class="line">        z = frame_data[<span class="string">&#x27;position_ecef_z&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        vx = frame_data[<span class="string">&#x27;velocity_ecef_x&#x27;</span>]</span><br><span class="line">        vy = frame_data[<span class="string">&#x27;velocity_ecef_y&#x27;</span>]</span><br><span class="line">        vz = frame_data[<span class="string">&#x27;velocity_ecef_z&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        lon = frame_data[<span class="string">&#x27;geod_longitude&#x27;</span>]</span><br><span class="line">        lat = frame_data[<span class="string">&#x27;geod_latitude&#x27;</span>]</span><br><span class="line">        alt = frame_data[<span class="string">&#x27;geod_altitude&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        timestamp = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(time.time()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tm&quot;</span>, timestamp, <span class="string">&quot;\n\tx:&quot;</span>, x, <span class="string">&quot;y:&quot;</span>, y, <span class="string">&quot;z:&quot;</span>, z, <span class="string">&quot;\n\tvx:&quot;</span>, vx, <span class="string">&quot;vy:&quot;</span>, vy, <span class="string">&quot;vz:&quot;</span>, vz, <span class="string">&quot;\n\tlon:&quot;</span>, lon, <span class="string">&quot;lat:&quot;</span>, lat, <span class="string">&quot;alt:&quot;</span>, alt)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>计算结果与n2yo.com对比：<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20240506110426.png" alt="skyfield-n2yo" /></p><h2 id="orekit轨道位置计算"><a class="markdownIt-Anchor" href="#orekit轨道位置计算"></a> Orekit轨道位置计算</h2><p>同样以STARLINK-1007卫星为例，计算当前卫星ECEF坐标(ITRS)及WGS84经纬度，基于orekit 11.2和hipparchus 3.0版本。</p><h3 id="java-demo"><a class="markdownIt-Anchor" href="#java-demo"></a> Java Demo</h3><p>maven pom依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.orekit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>orekit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hipparchus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hipparchus-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hipparchus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hipparchus-fitting<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hipparchus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hipparchus-optim<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hipparchus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hipparchus-ode<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hipparchus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hipparchus-geometry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java SGP4计算demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hipparchus.geometry.euclidean.threed.Vector3D;  </span><br><span class="line"><span class="keyword">import</span> org.hipparchus.util.FastMath;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;  </span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.orekit.bodies.GeodeticPoint;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.bodies.OneAxisEllipsoid;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.data.DataContext;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.data.DataProvidersManager;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.data.DirectoryCrawler;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.errors.OrekitException;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.frames.Frame;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.frames.FramesFactory;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.orekit.propagation.SpacecraftState;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.propagation.analytical.tle.TLE;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.propagation.analytical.tle.TLEPropagator;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.time.AbsoluteDate;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.time.TimeScalesFactory;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.utils.Constants;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.utils.IERSConventions;  </span><br><span class="line"><span class="keyword">import</span> org.orekit.utils.PVCoordinates;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrekitSgp4Demo</span> &#123;  </span><br><span class="line">    <span class="comment">// orekit-data文件名,这里将orekit-data解压放到resources文件目录下  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OREKIT_PATH_NAME</span> <span class="operator">=</span> <span class="string">&quot;orekit-data&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initOreKit</span><span class="params">()</span> <span class="keyword">throws</span> OrekitException &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">resPath</span> <span class="operator">=</span> OrekitSgp4Demo.class.getClassLoader().getResource(<span class="string">&quot;&quot;</span>).getPath();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">orekitPhysicalDataLocation</span> <span class="operator">=</span> resPath + <span class="string">&quot;/&quot;</span> + OREKIT_PATH_NAME;  </span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">&quot;orekit path: &quot;</span> + orekitPhysicalDataLocation);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">File</span> <span class="variable">orekitData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(orekitPhysicalDataLocation);  </span><br><span class="line">        <span class="keyword">if</span> (!orekitData.exists()) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(  </span><br><span class="line">                    <span class="string">&quot;Unrecoverable error: Could not locate orekit physical data at default location of &#x27;&quot;</span>  </span><br><span class="line">                            + orekitPhysicalDataLocation + <span class="string">&quot;&#x27;!&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">DataProvidersManager</span> <span class="variable">manager</span> <span class="operator">=</span> DataContext.getDefault().getDataProvidersManager();  </span><br><span class="line">        manager.addProvider(<span class="keyword">new</span> <span class="title class_">DirectoryCrawler</span>(orekitData));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TLE <span class="title function_">buildTLEFromLines</span><span class="params">(String tleLine1, String tleLine2)</span> <span class="keyword">throws</span> OrekitException &#123;  </span><br><span class="line">        <span class="comment">// Always test if TLE is good first  </span></span><br><span class="line">        <span class="keyword">if</span> (!TLE.isFormatOK(tleLine1, tleLine2)) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Bad TLE format!\n&quot;</span> + tleLine1 + <span class="string">&#x27;\n&#x27;</span> + tleLine2 + <span class="string">&#x27;\n&#x27;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TLE</span>(tleLine1, tleLine2);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">tle1Line0</span> <span class="operator">=</span> <span class="string">&quot;STARLINK-1007&quot;</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">tle1Line1</span> <span class="operator">=</span> <span class="string">&quot;1 44713U 19074A   24120.93093052  .00013004  00000+0  89012-3 0  9990&quot;</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">tle1Line2</span> <span class="operator">=</span> <span class="string">&quot;2 44713  53.0547 353.6824 0001286  89.2500 270.8636 15.06406908246617&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">        <span class="comment">// init orekit  </span></span><br><span class="line">        initOreKit();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// build tle  </span></span><br><span class="line">        <span class="type">TLE</span> <span class="variable">tle</span> <span class="operator">=</span> buildTLEFromLines(tle1Line1, tle1Line2);  </span><br><span class="line">        <span class="type">TLEPropagator</span> <span class="variable">tleProp</span> <span class="operator">=</span> TLEPropagator.selectExtrapolator(tle);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// get ITRF frame  </span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">itrf</span> <span class="operator">=</span> FramesFactory.getITRF(IERSConventions.IERS_2010, <span class="literal">true</span>);  </span><br><span class="line">        <span class="type">OneAxisEllipsoid</span> <span class="variable">oae</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OneAxisEllipsoid</span>(  </span><br><span class="line">                Constants.WGS84_EARTH_EQUATORIAL_RADIUS,  </span><br><span class="line">                Constants.WGS84_EARTH_FLATTENING,  </span><br><span class="line">                itrf);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> Calendar.getInstance(TimeZone.getTimeZone(<span class="string">&quot;GMT+:08:00&quot;</span>)).getTime();  </span><br><span class="line">            <span class="type">AbsoluteDate</span> <span class="variable">absoluteDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AbsoluteDate</span>(now, TimeScalesFactory.getUTC());  </span><br><span class="line">            <span class="type">SpacecraftState</span> <span class="variable">state</span> <span class="operator">=</span> tleProp.propagate(absoluteDate);  </span><br><span class="line">            <span class="type">PVCoordinates</span> <span class="variable">pvInITRF</span> <span class="operator">=</span> state.getPVCoordinates(itrf);  </span><br><span class="line">            <span class="type">Vector3D</span> <span class="variable">position</span> <span class="operator">=</span> pvInITRF.getPosition();  </span><br><span class="line">            <span class="type">Vector3D</span> <span class="variable">velocity</span> <span class="operator">=</span> pvInITRF.getVelocity();  </span><br><span class="line">  </span><br><span class="line">            <span class="type">GeodeticPoint</span> <span class="variable">gp</span> <span class="operator">=</span> oae.transform(position, itrf, absoluteDate);  </span><br><span class="line">            <span class="type">double</span> <span class="variable">longitude</span> <span class="operator">=</span> FastMath.toDegrees(gp.getLongitude());  </span><br><span class="line">            <span class="type">double</span> <span class="variable">latitude</span> <span class="operator">=</span> FastMath.toDegrees(gp.getLatitude());  </span><br><span class="line">            <span class="type">double</span> <span class="variable">altitude</span> <span class="operator">=</span> gp.getAltitude();  </span><br><span class="line">  </span><br><span class="line">            System.out.println(  </span><br><span class="line">                    <span class="string">&quot;time:&quot;</span> + now +  </span><br><span class="line">                            <span class="string">&quot; \n\tx:&quot;</span>  </span><br><span class="line">                            + position.getX()  </span><br><span class="line">                            + <span class="string">&quot;m, y:&quot;</span>  </span><br><span class="line">                            + position.getY()  </span><br><span class="line">                            + <span class="string">&quot;m, z:&quot;</span>  </span><br><span class="line">                            + position.getZ()  </span><br><span class="line">                            + <span class="string">&quot;m, \n\tvx:&quot;</span>  </span><br><span class="line">                            + velocity.getX()  </span><br><span class="line">                            + <span class="string">&quot;m/s, vy:&quot;</span>  </span><br><span class="line">                            + velocity.getY()  </span><br><span class="line">                            + <span class="string">&quot;m/s, vz:&quot;</span>  </span><br><span class="line">                            + velocity.getZ()  </span><br><span class="line">                            + <span class="string">&quot;m/s, \n\tlon:&quot;</span>  </span><br><span class="line">                            + longitude  </span><br><span class="line">                            + <span class="string">&quot;°, lat:&quot;</span>  </span><br><span class="line">                            + latitude  </span><br><span class="line">                            + <span class="string">&quot;°, alt:&quot;</span>  </span><br><span class="line">                            + altitude  </span><br><span class="line">                            + <span class="string">&quot;m&quot;</span>  </span><br><span class="line">                              );  </span><br><span class="line">  </span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算结果与n2yo.com对比：<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20240506112430.png" alt="orekit-java-n2yo" /></p><h3 id="python-demo"><a class="markdownIt-Anchor" href="#python-demo"></a> Python Demo</h3><p>基于Python调用Orekit最好使用conda安装环境，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda create -y -n orekit_env -c conda-forge orekit=11.2</span><br><span class="line">conda activate orekit_env</span><br><span class="line"></span><br><span class="line">pip install numpy</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> orekit</span><br><span class="line"><span class="keyword">from</span> orekit.pyhelpers <span class="keyword">import</span> setup_orekit_curdir</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> org.orekit.frames <span class="keyword">import</span> FramesFactory, TopocentricFrame</span><br><span class="line"><span class="keyword">from</span> org.orekit.bodies <span class="keyword">import</span> OneAxisEllipsoid, GeodeticPoint</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> org.orekit.utils <span class="keyword">import</span> IERSConventions, Constants</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> org.orekit.propagation.analytical.tle <span class="keyword">import</span> TLE, TLEPropagator</span><br><span class="line"><span class="keyword">from</span> org.orekit.time <span class="keyword">import</span> AbsoluteDate, TimeScalesFactory</span><br><span class="line"></span><br><span class="line">vm = orekit.initVM()</span><br><span class="line">setup_orekit_curdir(<span class="string">&quot;./orekit-data.zip&quot;</span>)</span><br><span class="line"></span><br><span class="line">itrf = FramesFactory.getITRF(IERSConventions.IERS_2010, <span class="literal">True</span>)</span><br><span class="line">earth = OneAxisEllipsoid(Constants.WGS84_EARTH_EQUATORIAL_RADIUS, </span><br><span class="line">                         Constants.WGS84_EARTH_FLATTENING, </span><br><span class="line">                         itrf)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    line0 = <span class="string">&quot;STARLINK-1007&quot;</span></span><br><span class="line">    line1 = <span class="string">&quot;1 44713U 19074A   24120.93093052  .00013004  00000+0  89012-3 0  9990&quot;</span></span><br><span class="line">    line2 = <span class="string">&quot;2 44713  53.0547 353.6824 0001286  89.2500 270.8636 15.06406908246617&quot;</span></span><br><span class="line"></span><br><span class="line">    tle = TLE(line1,line2)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (tle)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;Epoch :&#x27;</span>, tle.getDate())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    propagator = TLEPropagator.selectExtrapolator(tle)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        date = datetime.utcnow().replace(tzinfo=timezone.utc)</span><br><span class="line">        now = date.astimezone()</span><br><span class="line">        seconds = <span class="built_in">float</span>(date.second) + <span class="built_in">float</span>(date.microsecond) / <span class="number">1e6</span></span><br><span class="line"></span><br><span class="line">        absoluteDate = AbsoluteDate(date.year,</span><br><span class="line">                                    date.month,</span><br><span class="line">                                    date.day,</span><br><span class="line">                                    date.hour,</span><br><span class="line">                                    date.minute,</span><br><span class="line">                                    seconds,</span><br><span class="line">                                    TimeScalesFactory.getUTC())</span><br><span class="line"></span><br><span class="line">        state = propagator.propagate(absoluteDate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pv = state.getPVCoordinates(itrf)</span><br><span class="line"></span><br><span class="line">        p = pv.getPosition()</span><br><span class="line">        v = pv.getVelocity()</span><br><span class="line"></span><br><span class="line">        gp = earth.transform(p, itrf, absoluteDate)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tm&quot;</span>, now, <span class="string">&quot;\n\tx:&quot;</span>, p.getX(), <span class="string">&quot;y:&quot;</span>, p.getY(), <span class="string">&quot;z:&quot;</span>, p.getZ(), <span class="string">&quot;\n\tvx:&quot;</span>, v.getX(), <span class="string">&quot;vy:&quot;</span>, v.getY(), <span class="string">&quot;vz:&quot;</span>, v.getZ(),</span><br><span class="line">            <span class="string">&quot;\n\tlon:&quot;</span>, np.rad2deg(gp.getLongitude()), <span class="string">&quot;lat:&quot;</span>, np.rad2deg(gp.getLatitude()), <span class="string">&quot;alt:&quot;</span>, gp.getAltitude())</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>计算结果与n2yo.com对比：<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20240507122524.png" alt="orekit-python-n2yo" /></p><h2 id="卫星网络仿真应用"><a class="markdownIt-Anchor" href="#卫星网络仿真应用"></a> 卫星网络仿真应用</h2><p>卫星网络如Starlink星座，卫星移动模型可以基于sgp4模型(Skyfield/orekit/…)进行位置预测，坐标系上自然需要使用考虑不受地球自传影响的ITRS坐标系，地面站通常需要WGS84经纬度转换为ITRS坐标系下固定坐标(相当于地面站移动模型是固定不动的)。</p><p>WGS84转ITRS坐标系可参考<a href="https://tool-online.com/en/coordinate-converter.php#">wgs84-geocentric</a>进行转换，如下为北京地区转换：<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20240507124446.png" alt="wgs84-geocentric" /></p><p>卫星网络中卫星及地面站通过ITRS坐标系建立3D网络拓扑图，根据连接关系和位置距离可初步对星地链路建模(如波速分配覆盖/连接可用性/带宽/延迟等)和星间链路建模(如带宽/延迟/丢包率等)，根据全局动态拓扑时间切片后拓扑也可该时间切片下最短路径等计算，并根据路径配置路由进行网络仿真。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20240507154752.png" alt="sat-net-sim" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍如何基于Skyfield&amp;amp;Orekit中SGP4轨道位置计算并简单讨论其在卫星网络仿真中应用。&lt;/p&gt;</summary>
    
    
    
    <category term="astronomy" scheme="https://xiaohuiluo.github.io/categories/astronomy/"/>
    
    <category term="天文学" scheme="https://xiaohuiluo.github.io/categories/astronomy/%E5%A4%A9%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="skyfield" scheme="https://xiaohuiluo.github.io/tags/skyfield/"/>
    
    <category term="orekit" scheme="https://xiaohuiluo.github.io/tags/orekit/"/>
    
    <category term="sgp4" scheme="https://xiaohuiluo.github.io/tags/sgp4/"/>
    
  </entry>
  
  <entry>
    <title>H3地图分区及Starlink中应用</title>
    <link href="https://xiaohuiluo.github.io/2025/01/23/h3/"/>
    <id>https://xiaohuiluo.github.io/2025/01/23/h3/</id>
    <published>2025-01-23T02:24:01.000Z</published>
    <updated>2025-01-23T02:31:58.734Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍Uber公司提出的H3六边形网格的地理空间索引系统。</p><span id="more"></span><h3 id="h3简介"><a class="markdownIt-Anchor" href="#h3简介"></a> H3简介</h3><p><a href="%5BH3%5D(%5B%5Bhttps://h3geo.org/)">H3</a>是Uber公司提出的一款基于六边形网格的地理空间索引系统，用于将地球分割成大部分六边形和12个五边形组成的区域(H3中称为Cell)，对于Uber线上出租车业务来说猜想应该有很多的应用场景，比如区域内出租车合理分布派单，区域间路线导航等等，H3分区下效果如下图所示，实时效果可在<a href="https://wolf-h3-viewer.glitch.me/">h3 viewer</a>查看。<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230413091831.png" alt="H3 view" /></p><p>H3系统中有个重要的参数Resolution，这个就像类似图片分辨率控制，不同的Resolution下六边形区域大小不同，Resolution越大，六边形区域越小，小的Resolution下的六边形又近似由多个大的Resolution的六边形组成，如下为Resolution=1和Resolution=2下的北京区域对比。<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230413094031.png" alt="H3 resolution" /></p><p>H3核心由C语言编写，但是可以提供非常多的其他语言绑定的函数调用，具体详细功能、api、其他语言绑定支持及与其他类似地理空间索引系统对比可参见其官方doc文档<a href="https://h3geo.org/docs/">H3 Introduction</a></p><h3 id="starlink中的h3"><a class="markdownIt-Anchor" href="#starlink中的h3"></a> Starlink中的H3</h3><p>据了解，Starlink中使用了H3来分割地球表面的不同区域，Starlink为何要使用Uber的H3系统，个人理解交通里的运送人和物，其实和通信网络中传输数据有很多相通之处，比如交通中区域内安排出租车数量分布类似与通信里分配频段波束，交通中区域间车辆导航又类似网络中的路由转发传递数据包。</p><p>说回Starlink，其卫星和用户终端(Dishy)通过Ku波段基于相控阵天线通信，卫星在LEO轨道，单颗卫星覆盖面积有限，多颗卫星还会重叠覆盖同一区域，Starlink要在同一较大区域内如何在其内部较小区域内合理分配卫星Ku波段频率及波束是一大挑战，高效的地球表面分区系统也是其中关键之一，H3系统可以提供高效高低维度区域分割。区域内和区域间频率分配和波束赋形就需要Starlink提供高效的算法才能保证用户较为一致的带宽和延迟上的网络体验，里面包含覆盖区域卫星数量，通信频率干扰，天气情况(如雨衰)，区域内接入终端数量，天线视场限制，波束分配，波束投射角度及覆盖区域大小，波束跳动等因素，如下2021年<a href="https://www.reddit.com/r/spacex/comments/nd9ipw/summary_of_spacex_software_ama/">SpaceX Software AMA</a>上也有提到这个问题确实是较大挑战。<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230413105702.png" alt="SpaceX ama" /><br />Starlink目前用户在100万以上，用户主要在人口较稀疏的农村区域，用户网络体验可能还相对没那么明显，随着Starlink卫星数量的暴增，多颗卫星区域重复覆盖情况更复杂，用户量级的增长，区域用户分布更不均衡，增加星间激光链路等因素都将加剧区域分配频谱和波束的复杂性。</p><p>如下<a href="https://satellitemap.space/?constellation=starlink#">satellitemap.space</a>网站中Starlink可用区域的H3分区情况：<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230413110516.png" alt="Starlink H3" /></p><p>基于Cesium展示北京H3分区域两颗卫星覆盖下局部波束投射效果如下图<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230417173518.png" alt="Beijing H3" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍Uber公司提出的H3六边形网格的地理空间索引系统。&lt;/p&gt;</summary>
    
    
    
    <category term="geometry" scheme="https://xiaohuiluo.github.io/categories/geometry/"/>
    
    <category term="地理" scheme="https://xiaohuiluo.github.io/categories/geometry/%E5%9C%B0%E7%90%86/"/>
    
    
    <category term="H3" scheme="https://xiaohuiluo.github.io/tags/H3/"/>
    
  </entry>
  
  <entry>
    <title>tle</title>
    <link href="https://xiaohuiluo.github.io/2025/01/23/tle/"/>
    <id>https://xiaohuiluo.github.io/2025/01/23/tle/</id>
    <published>2025-01-23T01:40:51.000Z</published>
    <updated>2025-01-23T02:06:15.075Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍tle(两行轨道数据)数据格式，用于天文学中卫星、航天器或其他飞行器追踪。</p><span id="more"></span><p>两行轨道数据，由美国celestrak发明创立，是用于描述太空飞行器位置和速度的表达式，以wiki网站<a href="https://en.wikipedia.org/wiki/Two-line_element_set">TLE</a>格式介绍为例。<br />卫星、航天器或其他飞行器一进入太空就会被美国NORAD编入星历目录终生追踪，描述使用TLE格式。</p><h2 id="tle数据样例"><a class="markdownIt-Anchor" href="#tle数据样例"></a> tle数据样例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ISS (ZARYA)</span><br><span class="line">1 25544U 98067A   08264.51782528 -.00002182  00000-0 -11606-4 0  2927</span><br><span class="line">2 25544  51.6416 247.4627 0006703 130.5360 325.0288 15.72125391563537</span><br></pre></td></tr></table></figure><p>如上所示，tle是字符格式数据描述(区别于二进制数据描述)，每个飞行器tle数据一共3行描述。</p><h3 id="首行"><a class="markdownIt-Anchor" href="#首行"></a> 首行</h3><p>首行描述卫星名称，最长24个字符。<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230330094917.png" alt="tle title line" /></p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230330095015.png" alt="tle satellite name" /></p><h3 id="第一行"><a class="markdownIt-Anchor" href="#第一行"></a> 第一行</h3><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230330112451.png" alt="tle line 1" /></p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230330112540.png" alt="tle line 1 fields" /></p><table><thead><tr><th>Field</th><th>Desc</th></tr></thead><tbody><tr><td>1</td><td>行号</td></tr><tr><td>2</td><td>卫星编号</td></tr><tr><td>3</td><td>卫星类别</td></tr><tr><td>4</td><td>卫星发射年份(仅保留后两位，如上98为1998年)</td></tr><tr><td>5</td><td>卫星发射年份顺序(如上067表示1998年第67次发射)</td></tr><tr><td>6</td><td>发射卫星载荷个数(如上A表示是第一个载荷，如果一次发射多颗卫星载荷，使用26个英文字母排序；如果超过了26个编号，则使用两位字母，如AA、AB、AC编号)</td></tr><tr><td>7</td><td>星历建立年份(仅保留后两位如上图，08表示2008年)</td></tr><tr><td>8</td><td>星历建立天(一年中的第几天，用十进制数表示，小数表示天中的时间段，可以使用空格或数字表示天，如’236’,‘006’, ’ 6’)</td></tr><tr><td>9</td><td>平均运动的一阶导数，用来计算平均运动变化带来的轨道位置漂移，用于预测卫星位置及校准位置(第34字符可以是’+‘/’-‘/’ '用于表示导数正负值，空格为正)</td></tr><tr><td>10</td><td>平均运动的二阶导数，用于计算平均运动变化漂移变化带来的漂移，用于预测卫星位置和校准位置</td></tr><tr><td>11</td><td>BSTAR阻力扰动系数，用于模拟阻力(空气阻力)的系数</td></tr><tr><td>12</td><td>星历类型，美军空军空军指挥中心用1，其他用0</td></tr><tr><td>13</td><td>星历编号，按生成的TLE数据条数递增</td></tr><tr><td>14</td><td>校验和(对10取模运算)</td></tr></tbody></table><h3 id="第二行"><a class="markdownIt-Anchor" href="#第二行"></a> 第二行</h3><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230330122316.png" alt="tle line 2" /></p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230330122334.png" alt="tle line 2 desc" /></p><table><thead><tr><th>Field</th><th>Desc</th></tr></thead><tbody><tr><td>1</td><td>行号</td></tr><tr><td>2</td><td>卫星编号</td></tr><tr><td>3</td><td>轨道倾角，轨道面和地球赤道的夹角度数，0-90度表示顺行轨道(北极看是逆时针)，90-100度表示逆行轨道</td></tr><tr><td>4</td><td>升交点赤径，指卫星由南到北穿过地球赤道平面时，与地球赤道平面的交角</td></tr><tr><td>5</td><td>轨道偏心率，卫星椭圆轨道面中心点到地球球心点的距离除以卫星轨道半长轴，值为0~1的小数，这里只保留小数部分</td></tr><tr><td>6</td><td>近地点幅角，卫星近地点和升交点对地心的张角</td></tr><tr><td>7</td><td>平近点角，确定卫星经过近地点时间</td></tr><tr><td>8</td><td>每天环绕地球的圈数</td></tr><tr><td>9</td><td>发射以来绕地球飞行圈数</td></tr><tr><td>10</td><td>校验和</td></tr></tbody></table><h4 id="satellite-catalog-number"><a class="markdownIt-Anchor" href="#satellite-catalog-number"></a> Satellite Catalog Number</h4><p>Satellite Catalog Number(SATCAT, also known as NORAD (North American Aerospace Defense) Catalog Number, NORAD ID, USSPACECOM object number or simply catalog number, among similar variants)。<br />卫星编号：美国太空司令部按照发射或发现顺行分配给地球轨道和离开地球轨道所有人造物体的连续9位数字，编号小于10000的对象始终右对齐，并在左侧填充0或空格。<br />美国太空部队使用Alpha 5编号模式用于表示240000以上的数字，少于100000的数字不受Alpha 5影响，所有的Alpha 5数字映射如下：<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230330145808.png" alt="alpha 5 number" /></p><h4 id="degrees-parameter"><a class="markdownIt-Anchor" href="#degrees-parameter"></a> Degrees Parameter</h4><p>轨道倾角测量物体围绕天体的轨道倾斜度，它表示为参考平面与轨道平面或轨道物体的方向轴之间的角度，TLE中以地球赤道平面作为参考平面。<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230330145019.png" alt="tle degrees parameter" /><br />如上图所示，黄色轨道面为卫星轨道面，灰色为参考轨道面(通常为赤道面)：</p><ul><li>轨道倾角为 <code>i</code>，影响卫星轨道面相对赤道轨道面倾斜度，比如i=90度卫星轨道面为极轨道面</li><li>升交点赤径为 <code>Ω</code>，影响卫星轨道面和赤道轨道面两个相交点位置</li><li>近地点幅角为 <code>ω</code>，影响卫星轨道面长轴和赤道轨道面短轴夹角度数大小</li></ul><p>平近点幅角为椭圆轨道从轨道物体经过近点后所经过周期的分数，用角度表示，影响卫星经过近点绕行周期内时间段，比如同轨多颗卫星就是该值控制各卫星在轨道内绕行位置。<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230330152435.png" alt="tle mean anomaly" /></p><h4 id="eccentricity"><a class="markdownIt-Anchor" href="#eccentricity"></a> Eccentricity</h4><p>Orbital eccentricity : 轨道偏心率，会影响卫星轨道面形状(椭圆扁率)和偏离理想中心位置<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/Animation_of_Orbital_eccentricity.gif" alt="Animation_of_Orbital_eccentricity.gif" /><br />如上图不同偏心率轨道运行情况，红色(0.0)，绿色(0.2)，蓝色(0.4)，黄色(0.6)，粉色(0.8)</p><h4 id="轨道参数小结"><a class="markdownIt-Anchor" href="#轨道参数小结"></a> 轨道参数小结</h4><p>卫星运行轨道唯一性必要的参数有6个，被称为开普勒元素，这些元素如下：</p><ul><li>轨道倾角</li><li>升交点黄径</li><li>离心率</li><li>近日点幅角</li><li>半长轴</li><li>指定星历平近点幅角</li></ul><p>tle中涉及轨道的参数如下：</p><ul><li>轨道倾角 (Inclination)</li><li>升交点赤经 (Right Ascension of the ascending node)</li><li>轨道偏心率(Eccentricity)</li><li>平近点角 (Argument of perigee)</li><li>平近点时间 (Time of perigee passage)</li><li>平均每天绕行圈数 (Mean motion)</li><li>阻力扰动(BSTAR)</li></ul><p>半长轴在tle中是基于Mean motion和BSTAR来计算，近地点轨道高度可通过半长轴和Eccentricity来计算，tle中其他参数与开普勒元素一一对应。</p><p>如Starlink卫星互联网下通常基于轨道倾角和轨道高度一起设计成一层shell(壳)，为了让大规模卫星均匀散步于地球表面，在同一shell中升交点赤径和近地点幅角及轨道偏心率用于调整在壳层中的异轨分布，平近点幅角用于控制同轨分布，主要星座的tle可从<a href="%5Bhttps://celestrak.org/NORAD/elements/index.php?FORMAT=tle">celestrak</a>网站下载。</p><h3 id="轨道展示"><a class="markdownIt-Anchor" href="#轨道展示"></a> 轨道展示</h3><p>样例tle数据及对应的轨道：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ISS (ZARYA)</span><br><span class="line">1 25544U 98067A   08264.51782528 -.00002182  00000-0 -11606-4 0  2927</span><br><span class="line">2 25544  51.6416 247.4627 0006703 130.5360 325.0288 15.72125391563537</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230331095459.png" alt="ISS (ZARYA)" /></p><p>北斗49颗卫星对应的卫星轨道<a href="https://celestrak.org/NORAD/elements/gp.php?GROUP=beidou&amp;FORMAT=tle">tles</a>对应轨道：<br /><img src="https://gitee.com/martrix/blog-images/raw/master/img/20230331165301.png" alt="beidou" /></p><h6 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h6><p><a href="https://en.wikipedia.org/wiki/Two-line_element_set">wiki</a><br /><a href="https://www.space-track.org/documentation#/tle">Space-Track tle desc</a><br /><a href="https://zhuanlan.zhihu.com/p/600113644">基于TLE数据的一些计算 - 知乎</a><br /><a href="https://celestrak.org/NORAD/elements/index.php?FORMAT=tle">CelesTrak: Current GP Element Sets</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇介绍tle(两行轨道数据)数据格式，用于天文学中卫星、航天器或其他飞行器追踪。&lt;/p&gt;</summary>
    
    
    
    <category term="astronomy" scheme="https://xiaohuiluo.github.io/categories/astronomy/"/>
    
    <category term="天文学" scheme="https://xiaohuiluo.github.io/categories/astronomy/%E5%A4%A9%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="tle - 两行轨道数据" scheme="https://xiaohuiluo.github.io/tags/tle-%E4%B8%A4%E8%A1%8C%E8%BD%A8%E9%81%93%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>onos-netcfg</title>
    <link href="https://xiaohuiluo.github.io/2022/12/29/onos-netcfg/"/>
    <id>https://xiaohuiluo.github.io/2022/12/29/onos-netcfg/</id>
    <published>2022-12-29T09:24:11.000Z</published>
    <updated>2025-01-23T02:33:01.508Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍NetCfg网络配置子系统核心功能及实现及ONOS中原生App中如何使用NetCfg进行动态配置。</p><span id="more"></span><h2 id="netcfg子系统"><a class="markdownIt-Anchor" href="#netcfg子系统"></a> NetCfg子系统</h2><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221229-154514.png" alt="netcfg subsystem" /></p><p>Network Cfg(NetCfg) SubSystem主要用于对子系统进行配置，我们也可在ONOS App开发中使用(对App进行相应的动态配置)，Netcfg主要实现如上图所示，核心实现机制如下：</p><ul><li>Netcfg核心在于实现了使用Listener-Service机制，并提供Factory机制来扩展新的动态配置支持，基于NetworkConfigStore实现配置持久化</li><li>用户基于Factory机制可扩展注册新的动态配置类如DemoConfig</li><li>用户可扩展增加监听类如MyConfigListener注册监听来获取动态配置Config状态变化Event，并在其内部根据Config是否为DemoConfig或其他已有配置来执行相应配置动作</li><li>ONOS其他子系统和App中大量使用NetCfg机制来动态配置，如Device，Host等</li></ul><h2 id="dhcp中的netcfg"><a class="markdownIt-Anchor" href="#dhcp中的netcfg"></a> dhcp中的NetCfg</h2><p>ONOS自带App dhcp(apps/dhcp)中使用netcfg进行dhcp的动态配置代码，若我们基于maven或onos中使用bazel扩展配置也是按同样步骤进行，动态配置在于将json配置文件信息映射到java的内存中，netcfg支持了json中单个对象及数组的配置。</p><h3 id="dhcp中netcfg代码分析"><a class="markdownIt-Anchor" href="#dhcp中netcfg代码分析"></a> dhcp中NetCfg代码分析</h3><ol><li>netcfg服务集成</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cfg service服务集成    </span></span><br><span class="line"><span class="meta">@Reference(cardinality = ReferenceCardinality.MANDATORY)</span></span><br><span class="line"><span class="keyword">protected</span> NetworkConfigRegistry cfgService;</span><br></pre></td></tr></table></figure><ol start="2"><li>factories定义新的配置类(DhcpConfig)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// factories工厂支持新的配置类，可以支持object和list配置，通过ConfigFactory两个构造函数来区分</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;ConfigFactory&gt; factories = ImmutableSet.of(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConfigFactory</span>&lt;ApplicationId, DhcpConfig&gt;(APP_SUBJECT_FACTORY,</span><br><span class="line">                    DhcpConfig.class,</span><br><span class="line">                    <span class="string">&quot;dhcp&quot;</span>) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> DhcpConfig <span class="title function_">createConfig</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DhcpConfig</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的DhcpConfig配置类， 抽象类Config中object对应单对象配置，array对应数组配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DhcpConfig</span> <span class="keyword">extends</span> <span class="title class_">Config</span>&lt;ApplicationId&gt; &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>cfgListener自定义扩展配置监听类(InternalConfigListener)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展netcfg的监听类对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">InternalConfigListener</span> <span class="variable">cfgListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternalConfigListener</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义扩展配置监听类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">InternalConfigListener</span> <span class="keyword">implements</span> <span class="title class_">NetworkConfigListener</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">event</span><span class="params">(NetworkConfigEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">// 监听netcfg配置变化，变化为DhcpConfig时进行相应的动态操作</span></span><br><span class="line">        <span class="keyword">if</span> ((event.type() == NetworkConfigEvent.Type.CONFIG_ADDED ||</span><br><span class="line">             event.type() == NetworkConfigEvent.Type.CONFIG_UPDATED) &amp;&amp;</span><br><span class="line">            event.configClass().equals(DhcpConfig.class)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">DhcpConfig</span> <span class="variable">cfg</span> <span class="operator">=</span> cfgService.getConfig(appId, DhcpConfig.class);</span><br><span class="line">            reconfigureNetwork(cfg);</span><br><span class="line">            log.info(<span class="string">&quot;Reconfigured&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>自定义factories的注册&amp;注销和自定义listener的添加&amp;删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dhcp activate</span></span><br><span class="line"><span class="comment">// 自定义扩展listener添加</span></span><br><span class="line">cfgService.addListener(cfgListener);</span><br><span class="line"><span class="comment">// 自定义扩展factories注册</span></span><br><span class="line">factories.forEach(cfgService::registerConfigFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// dhcp deactivate</span></span><br><span class="line">cfgService.removeListener(cfgListener);</span><br><span class="line">factories.forEach(cfgService::unregisterConfigFactory);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dhcp配置文件"><a class="markdownIt-Anchor" href="#dhcp配置文件"></a> dhcp配置文件</h3><p>在onos/tools/test/configs/office-dhcp.json中是dhcp动态配置样例配置文件，用户可通过onos-netcfg命令或北向api接口将配置文件配置到onos dhcp中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;apps&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;org.onosproject.dhcp&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;dhcp&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.1.11.50&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ca:fe:ca:fe:ca:fe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;subnet&quot;</span><span class="punctuation">:</span> <span class="string">&quot;255.255.252.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;broadcast&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.1.11.255&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.1.8.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.8.8.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ttl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;63&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lease&quot;</span><span class="punctuation">:</span> <span class="string">&quot;300&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;renew&quot;</span><span class="punctuation">:</span> <span class="string">&quot;150&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rebind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;200&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="string">&quot;150&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;startip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.1.11.51&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;endip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.1.11.100&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="dhcp动态配置"><a class="markdownIt-Anchor" href="#dhcp动态配置"></a> dhcp动态配置</h3><p>本地部署好onos且启用好dhcp App后可通过onos-netcfg命令(若已安装好onos开发环境)进行dhcp动态配置，本地或非本地也可通过北向api接口进行动态配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># onos-netcfg本地动态配置dhcp</span></span><br><span class="line">onos-netcfg localhost onos/tools/test/configs/office-dhcp.json </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用北向api动态配置dhcp</span></span><br><span class="line">curl --fail -sSL --user onos:rocks --noproxy localhost -X POST -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> \</span><br><span class="line">http://localhost:8181/onos/v1/network/configuration -d @onos/tools/test/configs/office-dhcp.json</span><br></pre></td></tr></table></figure><p>配置后可在onos的日志中看到动态配置的日志输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onos_1  | 09:13:23.102 INFO  [ApplicationManager] Application org.onosproject.dhcp has been activated</span><br><span class="line">onos_1  | 09:13:23.306 INFO  [DhcpManager] Host discovery is <span class="built_in">set</span> to <span class="literal">false</span></span><br><span class="line">onos_1  | 09:13:23.306 INFO  [DhcpManager] Modified</span><br><span class="line">onos_1  | 09:14:05.588 INFO  [DhcpManager] Reconfigured</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇介绍NetCfg网络配置子系统核心功能及实现及ONOS中原生App中如何使用NetCfg进行动态配置。&lt;/p&gt;</summary>
    
    
    
    <category term="network" scheme="https://xiaohuiluo.github.io/categories/network/"/>
    
    <category term="网络" scheme="https://xiaohuiluo.github.io/categories/network/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="onos" scheme="https://xiaohuiluo.github.io/tags/onos/"/>
    
    <category term="sdn" scheme="https://xiaohuiluo.github.io/tags/sdn/"/>
    
    <category term="netcfg" scheme="https://xiaohuiluo.github.io/tags/netcfg/"/>
    
  </entry>
  
  <entry>
    <title>ONOS Subsystem</title>
    <link href="https://xiaohuiluo.github.io/2022/12/29/onos-subsystem/"/>
    <id>https://xiaohuiluo.github.io/2022/12/29/onos-subsystem/</id>
    <published>2022-12-29T07:46:45.000Z</published>
    <updated>2025-01-23T02:33:22.293Z</updated>
    
    <content type="html"><![CDATA[<p>ONOS核心由各个子系统构成，这些子系统一方面提供网络操作系统核心功能，一方面为用户扩展开发提供支持。</p><span id="more"></span><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221216-105911.png" alt="image-20221216105907047" /></p><p>ONOS子系统包含网络相关的设备，主机，网络业务，网络转发配置(流表)，设备驱动，网络动态配置，底层系统相关分布式节点Mastership，分布式存储Storage及GUI，主要的核心子系统如下：</p><ul><li>Topology, Device, Link, Host</li><li>Intent, Path, Tunnel, Packet</li><li>Flow Objective, Group, Meter, Flow Rule</li><li>Driver, Network Cfg, Storage, Mastership</li><li>UI Extension</li></ul><h2 id="subsystem-structure"><a class="markdownIt-Anchor" href="#subsystem-structure"></a> SubSystem Structure</h2><p>ONOS大部分子系统都集成或部分集成Listener-Service和Provider-Registry两大机制，并且基于ONOS中Store做分布式存储持久化，子系统核心结构如下：</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221216-110923.png" alt="subsystem structure" /></p><ol><li>北向SubSystem通过Listener-Service机制实现和App解耦</li><li>南向SubSystem通过Provider-Registry机制实现和南向协议解耦(部分子系统不涉就不集成该机制)</li><li>SubSystem持久化通过ONOS Store(Storage)机制实现分布式存储</li></ol><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221216-111601.png" alt="subsystem components" /></p><p>ONOS 子系统组成：</p><ol><li><strong>Listener-Service</strong>机制：Service监听SubSystem状态变化通过Event通知Listener(<strong>可扩展</strong>)执行相应操作</li><li><strong>Provider-Registry</strong>机制：支持多个Provider(<strong>可扩展</strong>)注册到Registry对SubSystem状态进行更新</li><li>SubSystemStore：持久化SubSystem状态数据(分布式存储，数据持久化，增删改查)</li><li>SubSystemNetCfg：支持对SubSystem的动态配置</li></ol><p>后面会陆续更新ONOS中主要核心子系统的分析，大部分子系统代码实现上是相似的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ONOS核心由各个子系统构成，这些子系统一方面提供网络操作系统核心功能，一方面为用户扩展开发提供支持。&lt;/p&gt;</summary>
    
    
    
    <category term="network" scheme="https://xiaohuiluo.github.io/categories/network/"/>
    
    <category term="网络" scheme="https://xiaohuiluo.github.io/categories/network/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="onos" scheme="https://xiaohuiluo.github.io/tags/onos/"/>
    
    <category term="sdn" scheme="https://xiaohuiluo.github.io/tags/sdn/"/>
    
    <category term="subsystem" scheme="https://xiaohuiluo.github.io/tags/subsystem/"/>
    
  </entry>
  
  <entry>
    <title>ONOS Overview</title>
    <link href="https://xiaohuiluo.github.io/2022/12/13/onos-overview/"/>
    <id>https://xiaohuiluo.github.io/2022/12/13/onos-overview/</id>
    <published>2022-12-13T02:30:09.000Z</published>
    <updated>2025-01-23T02:33:13.800Z</updated>
    
    <content type="html"><![CDATA[<p>Open Network Operating System (ONOS®) 是下一代SDN/NFV的领先的开源SDN控制器之一。</p><span id="more"></span><p>目前开源主流SDN控制器主要有ODL(OpenDayLight)和ONOS两大平台，其他的如Ryu、Floodlight等逐渐不再进行更新维护了，ODL和ONOS都基于Java的OSGi架构开发，所以两者在设计理念和开发上基本一致，熟悉其中一个后学习另一个也很容易上手，ONOS由ONF基金会主导，ODL由Linux基金会主导。</p><h2 id="onos架构"><a class="markdownIt-Anchor" href="#onos架构"></a> ONOS架构</h2><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221212-170148.png" alt="onos arth" style="zoom:80%;" /><p>ONOS整体架构基于OSGi(Apache Karaf实现)之上，核心提供多个网络相关的核心子系统，南向通过丰富的协议及网元设备行为驱动机制来支撑多厂商多类型设备支持，北向通过北向接口开放网络功能，值得提的是ODL的设计理念和ONOS类似。</p><p>架构特点：</p><ul><li>High-availability, scalability and performance(高可用、可扩展伸缩、高性能)</li><li>Strong abstractions and simplicity to develop apps and solutions(高度抽象及简化apps和方案开发)</li><li>Protocol and device behaviour independence(南向协议及独立设备行为驱动机制-避免厂商锁定)</li><li>Separation of concerns and modularity(解耦及模块化理念)</li></ul><h2 id="onos-osgi"><a class="markdownIt-Anchor" href="#onos-osgi"></a> ONOS OSGi</h2><p>ONOS底层采用Java OSGi架构(Apache Karaf)来构建平台，ODL同样采用了该架构。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221212-173057.png" alt="OSGi" /></p><p>OSGi架构特点：</p><ul><li>Bundles – Bundles are the OSGi components made by the developers.</li><li>Services – The services layer connects bundles in a dynamic way by offering a publish-find-bind model for plain old Java objects.</li><li>Life-Cycle – The API to install, start, stop, update, and uninstall bundles.</li><li>Modules – The layer that defines how a bundle can import and export code.</li><li>Security – The layer that handles the security aspects.</li><li>Execution Environment – Defines what methods and classes are available in a specific platform.</li></ul><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221213-085554.png" alt="Apache Karaf" /></p><p>Apache Karaf架构实现特点：</p><ul><li>Hot deployment(热部署)</li><li>Dynamic configuration(动态配置)</li><li>Logging system(日志系统)</li><li>Provisioning(应用提供)</li><li>Shell Console(Shell命令行控制台)</li><li>Remote management(远程管理)</li><li>WebConsole(Web控制台)</li><li>Security(安全)</li><li>Instances management(实例管理)</li><li>Docker &amp; Cloud ready(云化容器化支持)</li></ul><p>OSGi(Apache Karaf实现)架构模块化开发、动态配置‘、热部署及完善的web应用平台等特性契合了电信级软件的要求。</p><h2 id="onos子系统"><a class="markdownIt-Anchor" href="#onos子系统"></a> ONOS子系统</h2><p>ONOS子系统提供最核心的网络相关功能，这些功能为上层网络应用开发提供底层接口，子系统设计和实现上采用了相同的理念。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221212-172008.png" alt="onos subsystem" /></p><p>如上红色框部分就是ONOS实现的核心子系统，包含Topology网络拓扑、Link网络连接、Network Cfg网络配置、Flow Rule/Objective流表、Device网络设备、Host网络主机，Packet网络数据包等，子系统大部分采用<strong>Provider-Registry</strong>机制和<strong>Service-Listerner</strong>机制设计理念来达到模块化解耦的目的。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221212-172853.png" alt="onos subsystem provider&amp;listener" /></p><h2 id="onos编译开发工具"><a class="markdownIt-Anchor" href="#onos编译开发工具"></a> ONOS编译开发工具</h2><ul><li><p>编译系统演进(maven --&gt; buck --&gt; <strong>bazel</strong>)，bazel提供大工程快速编译能力</p></li><li><p>自带开发工具</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221213-093135.png" alt="onos dev tools" /></p></li></ul><h2 id="onos代码结构"><a class="markdownIt-Anchor" href="#onos代码结构"></a> ONOS代码结构</h2><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221213-093452.png" alt="onos code" /></p><h2 id="onos-app"><a class="markdownIt-Anchor" href="#onos-app"></a> ONOS App</h2><p>ONOS上层网络功能可通过开发ONOS支持的App应用来支持，ONOS内部也有实现丰富的网络App样例(简单的如fwd，dhcp等、复杂的如Trellis，SONA，OpenCORD等解决方案)，用户可直接在onos代码内使用bazel或者外部使用maven开发网络App应用。</p><h3 id="bazel创建app"><a class="markdownIt-Anchor" href="#bazel创建app"></a> bazel创建App</h3><ul><li><p>bazel开发app需要在onos代码统一进行编译</p></li><li><p>新app需要加入到onos项目module</p></li><li><p>bazel build遵循onos要求</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221213-094409.png" alt="image-20221213094409217" /></p></li></ul><h3 id="maven创建app"><a class="markdownIt-Anchor" href="#maven创建app"></a> maven创建app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># onos支持版本仓库查询</span></span><br><span class="line"><span class="comment"># https://repo.maven.apache.org/maven2/org/onosproject/onos-bundle-archetype/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先配置好onos开发环境</span></span><br><span class="line"><span class="comment"># ONOS </span></span><br><span class="line"><span class="built_in">export</span> WORKSPACE=<span class="string">&quot;/home/hui/SDN&quot;</span></span><br><span class="line"><span class="built_in">export</span> ONOS_ROOT=<span class="string">&quot;<span class="variable">$WORKSPACE</span>/onos&quot;</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ONOS_ROOT</span>/tools/dev/bash_profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> ONOS_POM_VERSION=2.1.0</span><br><span class="line"><span class="comment"># 交互式创建 （首次执行会从maven仓库下载较多依赖库）</span></span><br><span class="line">onos-create-app</span><br><span class="line"><span class="comment"># 参数式创建</span></span><br><span class="line">onos-create-app onos-app cn.hui onos-app 1.0.0-SNAPSHOT cn.hui</span><br><span class="line"></span><br><span class="line"><span class="comment"># maven编译下载遇到问题可尝试将maven mirror修改为阿里云mirror等国内mirror</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221213-101837.png" alt="maven app pom" /></p><p>ONOS App编译生成的.oar文件其实本质上是Karaf中的feature(和ODL中没有本质的区别，因为都是基于Karaf架构)，可以解压.oar看到相应的jar包和feature的xml配置。</p><h2 id="ng-sdn"><a class="markdownIt-Anchor" href="#ng-sdn"></a> NG-SDN</h2><p>值得提一下ONF基金会提出下一代SDN，控制面提出μONOS基于微服务控制器，数据面提供stratum+P4作为下一代SDN的技术栈，有兴趣也可以了解。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221213-095944.png" alt="NG-SDN" /></p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221213-100010.png" alt="μONOS" /></p><h6 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h6><p><a href="https://wiki.onosproject.org/">https://wiki.onosproject.org/</a></p><p><a href="https://www.opennetworking.org/onos">https://www.opennetworking.org/onos</a></p><p><a href="https://wiki.onosproject.org/display/ONOS/Downloads">https://wiki.onosproject.org/display/ONOS/Downloads</a></p><p><a href="https://www.osgi.org/">https://www.osgi.org/</a></p><p><a href="http://karaf.apache.org/">http://karaf.apache.org/</a></p><p><a href="https://bazel.build/">https://bazel.build/</a></p><p><a href="https://www.opennetworking.org/cord/">https://www.opennetworking.org/cord/</a></p><p><a href="https://wiki.opencord.org/">https://wiki.opencord.org/</a></p><p><a href="https://github.com/onosproject">https://github.com/onosproject</a></p><p><a href="https://www.opennetworking.org/">https://www.opennetworking.org/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Open Network Operating System (ONOS®) 是下一代SDN/NFV的领先的开源SDN控制器之一。&lt;/p&gt;</summary>
    
    
    
    <category term="network" scheme="https://xiaohuiluo.github.io/categories/network/"/>
    
    <category term="网络" scheme="https://xiaohuiluo.github.io/categories/network/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="onos" scheme="https://xiaohuiluo.github.io/tags/onos/"/>
    
    <category term="sdn" scheme="https://xiaohuiluo.github.io/tags/sdn/"/>
    
  </entry>
  
  <entry>
    <title>LPM</title>
    <link href="https://xiaohuiluo.github.io/2022/12/07/lpm/"/>
    <id>https://xiaohuiluo.github.io/2022/12/07/lpm/</id>
    <published>2022-12-07T08:57:24.000Z</published>
    <updated>2025-01-23T02:32:45.719Z</updated>
    
    <content type="html"><![CDATA[<p>本文源自Juniper工程师关于LPM最长匹配从算法到芯片实现上的一篇博文，个人觉得讲解的不错，简单翻译了一下，有兴趣也可去翻墙去看原文<a href="https://www.linkedin.com/pulse/longest-prefix-matching-networking-chips-sharada-yeluri/%E3%80%82">https://www.linkedin.com/pulse/longest-prefix-matching-networking-chips-sharada-yeluri/。</a></p><span id="more"></span><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>本文解释了<strong>FIB</strong>(Forwarding Information Base，转发信息库)，IP转发中的<strong>LPM</strong>(longest prefix match，最长匹配算法)的基本概念，以及其是如何随着时间而不断演进发展的，重点在于其在各种硬件实现选择及在芯片面积/功率和性能方面的相互比较，本文旨在作为高级入门文章。</p><h2 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h2><p>在网络系统(路由器或交换机)中，各种处理过程被划分为<strong>平面</strong>，平面是一个抽象的概念，最长引用的平面是控制平面和数据平面(也被称为转发平面)。</p><p>控制平面中执行的任务决定了应该如何处理和转发数据包。控制平面在后台执行这些任务并生成数据平面中的表项。数据平面从网络芯片中的多个物理链路以数据包的形式接收网络流量，检查数据包内的部分或者全部L2/L3/L4协议头，并采取动作(Actions)。包处理(Packet Processing)用于描述检查包头和决定下一步的任务，该动作可以决定数据包必须通过其离开路由器的物理接口(使用控制平面生成的路由表项)，排队和调度以从该接口转发出去，或者如果数据包违反流量规则/安全检查则丢弃数据包，或者发送到控制平面进一步检查等等。</p><p>控制平面维护<strong>RIB</strong>(Routing Information Database，路由信息数据库)，其中包含通过后台运行的路由协议发现的路由。路由通常分为直接路由、静态路由和动态路由。控制平面软件将<strong>路由先优化和压缩</strong>RIB表项中的信息得到安装到网络芯片内的FIB表项，RIB压缩本身就是有趣的话题，本文不做介绍。</p><p>FIB存储在片上或片外存储器(SRAM、HBM/DRAM或TCAM)中，它包含的信息刚好足以将数据包转发到它们的下一个目的地或下一跳。这些表项由控制平面在后台更新(安装、删除)，而不会中断数据平面流量。</p><p>对于IP转发，FIB通常包含IP地址、子网掩码(或IP前缀)和下一跳。根据硬件实现，下一跳可以直接指示数据包应该通过哪个物理接口沿着其路径转发多最终目的地，或者它可以指向另一个表中的一个条目，该条目包含一组关于如何计算数据包的传出接口的指令。</p><p>在本次讨论中，我们为FIB条目使用简化格式，其中包含IPv4地址、子网掩码和传出以太网接口。实际上的FIB结构很复杂，可以在IPv4和IPv6地址之间共享，包含几个与目的地址一起用于查找的附加字段，并且包含更多信息来指定数据包各种动作。</p><p>下表显示了IPv4地址的概念FIB表，IPv6条目看起来与此类似，但与IPv4相比，它们具有更宽的地址(128bits).</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221009-142155.png" alt="ipv4" /></p><p>如果FIB要包含地球上使用的每一个IP地址，它将需要数十亿个条目，而且不可能将它们存储在硬件中，例如，一个32位的IPv4地址将需要大约40亿个条目。因此，路由器通常会聚合未直接连接到其传出的目的的路由(基于子网)，子网掩码只是硬件仅查看传入数据包的目的地址中掩码中位设置为1的位。</p><p>例如，对于网络目的地址为192.168.0.0和网络掩码为255.255.255.0的条目，当扩展为二进制格式时，掩码的高16位被设置为1，这个数字<strong>16称为前缀长度</strong>，FIB条目称为<strong>192.168.0.0/16</strong>(或192.168.*)。将子网掩码存储为前缀长度会减少FIB表中的条目宽度。</p><p>在上面FIB表中，尽管为了便于理解，所有的前缀长度都是2的幂，但是对于IPv4地址，允许在0~32之间的任何前缀长度，默认使用前缀长度0(网络掩码0.0.0.0)，该条目为当它与任何其他具有非0前缀的条目不匹配时硬件选择的条目，前缀长度为32表示该条目中IP地址的所有位都应用与比较。这些前缀是Internet可扩展性的关键，一个典型的IPv4 FIB包含大约90万个条目(互联网表中使用的所有IPv4前缀大小)，而如果每个IP地址都需要一个唯一的条目，则有数十亿个条目。</p><h2 id="什么是lpm"><a class="markdownIt-Anchor" href="#什么是lpm"></a> 什么是LPM</h2><p>在IP转发过程中，当网络芯片收到一个IP数据包时，它会使用目标IP地址搜索FIB以找到所有匹配的条目，在确定的条目是否匹配时，它使用存储在FIB中的前缀长度来屏蔽与比较无关的目标地址位。例如，如果一个数据包的目的IP地址是192.168.1.108，它匹配FIB表中条目为1、2、3和6。在所有的匹配中，<strong>前缀最长的匹配是条目6</strong>，它表示到达下一跳的最精确方式，硬件应该选择这个条目。因此，所有匹配的条目中最具体的条目–具有最长前缀长度的条目–称为最长前缀匹配(LPM)。这些重叠前缀在转发表中非常常见，以便在数据包通过多个路由器到达目的地时为数据包提供最佳路径。</p><h2 id="lpm实现的挑战"><a class="markdownIt-Anchor" href="#lpm实现的挑战"></a> LPM实现的挑战</h2><p>在上面的简化示例中，仅在路由表中显示了8个条目，但是，典型的高端路由器中的FIB数据库有数百万个条目，随着IPv6转发的广泛采用和IPv4地址空间的耗尽，硬件中保存更多的条目的要求不断增长。此外，网络芯片供应商在每个芯片中封装了越来越多的带宽，这给数据包处理管道/引擎以非常高的速率执行这些LPM查找带来了很大的负担。</p><p>以14.4T带宽的高端网络芯片为例，为了满足64B数据包的线路速率(以太网接口上最小的数据包大小)，它需要处理数据包并以每秒210亿个数据包或每次LPM查找不到46ps的速度进行查找。支持如此高的数据包处理速率将需要许多数据包处理管道来分配工作负载，这反过来又会增加如此多的硬件面积，以至于即使在标线限制下也不可能将所有这些都安装在一个裸片中。</p><p>许多网络芯片会考虑典型的网络负载，并增加其数据包处理管道满足线速的最小数据包大小，在上面的示例中，如果我们仅满足350B及以上数据包的线速，则处理速率会下降到每个数据包约200ps，假设有四个数据包处理管道，每个管道都需要在200x4=800ps内处理数据包并执行LPM，这个意味着在1.25GHz时钟频率下每个周期一个数据包。</p><p>LPM的意义在于，在1.25GHz的一个时钟周期内，它需要解析FIB表中的数百万个条目，并找到包含最长前缀的条目！显然，通读每条条目并找到最长的前缀匹配条目并不能满足要求。</p><p>此外，由于大尺寸，FIB表通常在所有处理管道之间共享，这个增加了这些表必须支持的访问数量的额外负担。一些应用在FIB中需要超过1000万条路由条目，而扩展SRAM以容纳这么多路由实际上不可能的。最终，FIB表的一部分溢出到外部存储器中，外部存储器带宽也不便宜，例如一个HBM3部件可提供约5Tbps的可用带宽，该外部存储器通常在数据包缓冲和数据包处理表之间共享。由于beachfront限制(多芯片模块中Serdes或die-to-die接口占据了大部分区域)，向封装中添加更多HBM部件通常不容易，鉴于外部存储器的带宽有限，网络架构师在设计查找方式，即并非每个LPM都需要访问外部存储器表。</p><h2 id="lpm架构"><a class="markdownIt-Anchor" href="#lpm架构"></a> LPM架构</h2><p>LPM的任何硬件流水线实现，连同满足高处理速率，都应该最小化这个过程的整体面积和功耗，此外，该架构应该能够更快地从控制平面软件中插入和删除路由表项</p><p>，有几种方法可以解决这个问题，在本文中，将介绍业界常用几种：</p><ul><li>Tree/基于trie结构</li><li>TCAMs</li><li>Hybrid(TCAMs/Tries)</li><li>Bloom过滤器和哈希表</li></ul><h3 id="treetrie结构"><a class="markdownIt-Anchor" href="#treetrie结构"></a> Tree/trie结构</h3><p>一个未压缩的二叉树，其中每个节点测试一位查找键(又名目标IP地址或DIP)是可视化和实现最长前缀匹配查找的最简单方法之一。为了用图表简洁说明这个例子，现在假设IP地址只有4位，FIB中条目10*、0011、0110和1000，下图表示4位IP的未压缩树带有路由的节点以绿色突出显示的地址。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221101-144259.png" alt="1664774619728" /></p><p>根节点包含默认路由，每个节点必须包含要在key中测试的位的位置和两个指针(用于根据位值0或1向左还是向右分支)、指示该节点是否具有附加路由的位以及下一跳信息。key值(IP地址)未显示存储在节点中，如果没有压缩，这棵树将需要内存中数十亿个条目来存储每个节点的信息，在最坏的情况下，需要128次内存访问才能找到IPv6地址最长前缀匹配。</p><p>在所有的使用二叉树的硬件LPM实现中，未使用的节点被剪除，节点被压缩，通过这样做，大大减少了节点数量以及所需的内存访问次数。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221009-155910.png" alt="No alt text provided for this image" /></p><p>上面的树可以进一步压缩，其中只有一个子节点的父节点合并在一起(modified Patricia trie, Juniper Networks patent)，如下图所示，这需要将部分key值存储在合并的每个节点中。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221009-160143.png" alt="No alt text provided for this image" /></p><p>对于上图所示的压缩树，硬件从根节点开始，并将数据包的current_nexthop设置为附加到根节点的默认路由，硬件根据DIP中的最高有效位进入下一个节点(向左或向右)，它将bits_to_ignore更新为1，因为已经检查了最高有效位。</p><p>任何节点的评估如下：</p><ol><li>在屏蔽掉最重要的bits_to_ignore之后，将目标IP地址中的下一个bits_to_match位数与节点处的key值进行比较，如果不匹配，则终止查找，如果匹配则转到2</li><li>如果节点不是叶节点(左右节点均为空)，硬件查看bits_to_ignore+bits_to_match位之后的位以采取左支或右支(如果该位为0，则采取左分支，否则采取右分支)，如果当前节点有附加路由，则用该节点的下一跳更新current_nexthop</li><li>如果要采用的分支为空指针，则终止查找</li><li>如果要采取的分支不是空指针，则继续查找指针指向的子节点，bits_to_ignore由当前节点的匹配和比较的位数更新</li></ol><p>每当处理终止于硬件的current_nexthop状态中存储的值指示LPM查找的下一跳，上述评估可以使用硬件中的专用状态机一次遍历一个数据包的LPM(run_to_completion)。</p><p>这种压缩的二叉树还会导致对共享内存的多次访问，并且评估时间不确定。例如，在具有100万条路由的2-way Patricia trie中，查找的平均需要对内存中的节点进行20次访问，很难对这些访问进行流水线化，因为它需要将每个阶段的节点存储在属于每个流水线阶段的单独内存结构中，这可能导致在添加/更新路由是这些内存使用效率低下。</p><p>在这些结构中添加/删除条目通常由控制平面软件通过在内存中的单独空间中创建中间界都机器子节点副本，并更新新父节点的指针以指向新的节点来完成。尽管它需要额外的内存，但更新对流量的干扰最小。</p><p>LPM算法处理有许多变体，其中尝试优化以减少阶段数(Stage)、存储或两者的平衡。尽管trie实现更简单，但是由于大量的内存访问，它们不能很好地扩展每秒十亿次的LPM处理，大多数高带宽网络芯片已经拜托纯粹的trie实现。</p><h3 id="tcams"><a class="markdownIt-Anchor" href="#tcams"></a> TCAMs</h3><p>TCAM(ternary content-addressable memory，三元内容寻址存储器)是一种专用高速存储器，可以在一个周期内搜索其所有内容，与二进制相反，三进制表示内存使用三个不同的输入(0、1或x)存储和查询数据的能力。这里的状态x是无关紧要的，无关状态是通过TCAM条目中每个存储单元添加一个掩码位来实现。因此，一个32位宽的TCAM条目包含32个(值、掩码)对。</p><p>为了更好地解释这个概念，请使用上面的FIB表中条目 <code>#2(192.168.0.0/16)</code>，二进制格式的地址为<code>11000000 10101000 00000000 00000000</code>，由于我们仅对匹配高16位感兴趣，因此该地址对于的掩码位为<code>11111111 11111111 00000000 00000000</code>。</p><p>TCAM中每个存储单元都包含使用掩码掩后与0和1进行比较的电路，然后，将数据字中每个存储单元的匹配输出组合起来，形成每个TCAM条目的最终匹配结果，此外，TCAM还具有额外的电路，用于查看所有匹配的TCAM条目并输出第一个匹配条目的索引，一些TCAM还提供所有匹配条目的索引。</p><p>在TCAM中存储FIB条目时，对于每个FIB表，软件根据前缀长度对条目进行降序排列，并将最大的前缀长度条目存储在较低的索引处。</p><p>例如，示例中FIB表可以存储在TCAM中，如下所示：</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221009-170300.png" alt="No alt text provided for this image" /></p><p>现在，当一个目标IP地址为192.168.1.101的数据包时，在TCAM中查找时，将输出&quot;3&quot;作为匹配的条目，每个条目的下一跳/动作可以存储在单独的片上存储器中，可以使用TCAM查找结果访问该存储器以确定数据包下一跳，以上是如何使用TCAM执行LPM的非常简化的描述。</p><p>但是，TCAM的基本问题是每个存储单元需要接近16个晶体管(相比之下，SRAM单元需要4~6个晶体管，DRAM单元需要1个晶体管)。因。很难在TCAM中打包具有数百万条目的大型FIB表，嵌入式TCAM的深度也受到限制(大约4K条目)，以便在一个周期内进行比较。大于4K条目的FIB需要多个TCAM库，需要并行访问，此外，由于每个搜索操作都涉及激活所有条目，因此每次查找都会消耗大量功率。</p><p>TCAM仍然是实现防火墙(访问控制列表)、QoS功能和数据包分类的流行选择，因为这些功能需要的规模远小于FIB表，如今，为了平衡大型FIB的功率/面积和性能，一些路由芯片供应商使用混合方式，将TCAM的优点和trie结构相结合。</p><h3 id="混合方法tcam根节点的trie结构"><a class="markdownIt-Anchor" href="#混合方法tcam根节点的trie结构"></a> 混合方法(TCAM根节点的trie结构)</h3><p>在混合方法中，trie结构根节点出的大型TCAM可以减少结构中的阶段数(Stages)，例如，对于IPv4路由，TCAM可以包含MSB 16位地址，TCAM中查找可能会产生匹配，其结果指示匹配的位数以及指向子节点的指针。</p><p>即使在根节点有TCAM，上一节中有限的2路或4路节点的Patricaia trie结构仍然可能导致许多内存访问，限制阶段(从而限制内存访问)的一种方法是使N路节点中的数字N变大，并稍微修改方案以增加如何选择子节点的灵活性。例如，有TCAM匹配指向的阶段1中的节点可能包含一个4路条目，每个条目都包含key(IP地址/前缀长度)和忽略节点key和传入数据包DIP之间的最高位bits_to_ignore后要匹配的位数。</p><p>例如，如果数据包的DIP已经与TCAM中的IP地址的16位MSB匹配，则下一个节点可以从DIP的第17位开始比较，这里匹配可以结束LPM处理(如果条目的子指针为空)，也可以指向下一个子节点。</p><p>第二个节点可以包含具有相似条目的4或8路节点，第二个节点的匹配可以终止搜索或指向节点条目驻留在外部存储器中的第三阶段。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221009-174239.png" alt="No alt text provided for this image" /></p><p>如果活动前缀均匀分布在所有条目/节点上，则上述方法效果很好，如果更多的路由集中在几个第一阶段的节点上，更多的路由最终会进入带宽有限的外部存储器。这个瓶颈一直持续到控制平面软件能够从TCAM中的根节点开始<strong>重新平衡整颗树</strong>，软件反应时间很长，当节点重新平衡时，流量模式会再次发生变化。</p><p>但是，这种方法有几个优点，trie结构具有固定数量的阶段(上图中的3个阶段)，因此，具有确定的处理时间。对于大多数IP查找，每个LPM查找只需要两次<strong>片上SRAM</strong>访问，因为512K IPv4条目可以驻留在片上，内存约为64Mbits。</p><p>对于350B数据包的14.4Tbps芯片的线速示例，四个数据包处理管道中的每个都必须每个周期处理一个数据包，如果数据包的每个LPM查找都涉及2次片上存储器访问，则保存FIB表的SRAM结构需要在每个周期提供至少8次访问(4个流水线x每个流水线2次访问)。</p><p>为了提供如此高的带宽，FIB表通常被划分为许多逻辑库，并且为来自这些库的请求者的访问提供繁重的stats-mutxing，这增加了由于瞬时热库引起的读取响应的可变延迟。此外多处理引擎之间共享的大型片上存储器驻留在中央位置，并且在请求客户端和中央结构之间具有100多个周期的延迟。因此，即使使用片上结构，每个数据包多次访问它们也会增加数据包处理的可变延迟，在数据移动期间消耗额外的功率，并降低固定流水线数据包处理的好处。</p><p>因此，对于流水线数据包处理架构，必须将片上FIB表的访问减少到每个数据包一次访问，并且偶尔访问片外表，这就是布隆过滤器和哈希表需要解决的问题。</p><h3 id="bloom过滤器hash表"><a class="markdownIt-Anchor" href="#bloom过滤器hash表"></a> Bloom过滤器/Hash表</h3><p>维基百科说： “布隆过滤器是一种节省空间的概率数据结构，用于测试元素是否是集合中的成员，可能出现误报，但是不会发生误报，，<strong>对元素的查询返回可能在集合中或绝对不在系列中</strong>。”</p><p>布隆过滤器是具有K个不同散列函数的M位数组，可以通过使用K个不同的散列函数对元素进行散列并将散列结果指向的K个位置在布隆过滤器数组中设置为1来将元素添加到集合中。</p><p>布隆过滤器如何帮助减少对大型FIB结构的访问次数？Juniper Networks在这方面有几项专利。</p><p>高维度的概念如下(实际实现要复杂得多！)，FIB条目首先填充为<strong>哈希表</strong>，一个典型的哈希表条目包含IP地址、前缀长度、下一跳和动作。为了解决散列冲突，可以使用<strong>杜鹃散列方案</strong>，其中使用两个不同的散列函数对新路由的key(用前缀长度位掩码的IP地址)进行散列，以获得条目的两个可以写的位置(每个散列表一个)，该条目被写入空白位置之一，如果两个位置都被占用，则软件可以使用布谷鸟动作重新洗牌(有关更多请参考wiki)，所有这些都由控制平面软件完成以填充哈希表，数据平面逻辑完全不感知这点。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221010-093208.png" alt="No alt text provided for this image" /></p><p>控制平面软件更新布隆过滤器如下：</p><ol><li>从一个空的M位布隆过滤器数组开始</li><li>然后对于FIB哈希表中的每个条目，通过从IP地址中获取为的前缀长度来构造一个key(其他位被清零)</li><li>使用该Key，评估K个不同的哈希函数以获得M位数组内的K个不同索引，所有的K个位置都设置为1</li><li>对FIB表中的每个条目以及每次在FIB表中更新路由时重复步骤2、3和4。</li></ol><p>在下图中，FIB表(表1)的每个条目都经过了3次散列(K=3)，并设置了布隆过滤器数组中的总位数应至少是FIB表条目数的8倍；否则布隆过滤器中的大部分位将被设置，并且误报率增加。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221010-094053.png" alt="No alt text provided for this image" /></p><p>布隆过滤器位也可以在逻辑上进行分区，为不同的前缀长度范围提供不同数量的存储体，为前缀长度范围分配的布隆过滤器位数可能取决于FIB表中该范围内的有效前缀数量。</p><p>该软件还为每种类型的查找(例如IPv4或IPv6)维护前缀长度结构，其中包含FIB表中针对该查找类型按降序排列所有有效前缀长度。IPv4和IPv6的前缀长度总数理论限制分别为32和128。</p><p>使用布隆过滤器进行LPM时，硬件的第一步是获取特定查找类型的前缀长度排序列表，然后，通过使用排序的前缀长度屏蔽数据包的目标IP地址中的位来探测布隆过滤器的这些前缀长度，并且对于每个前缀长度，使用软件用来填充的相同哈希函数访问布隆过滤器K次布隆过滤器。如果所有的K个位置都是&quot;1&quot;，那么该键很可能在FIB表中，这是如此简单。</p><p>布隆过滤器的每个探测都涉及访问布隆过滤器数组的K个不同位，K通常为3或4。每个访问量子只有一位，通过在前缀范围和散列函数之间对于布隆过滤器数组进行逻辑分区，每个周期可以从布隆过滤器库中进行多达16个前缀长度探测。</p><p>从探测结果来看，导致布隆过滤器匹配的最大前缀长度很可能出现在FIB表中，使用该key访问FIB哈希表。</p><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221010-100022.png" alt="No alt text provided for this image" /></p><p>匹配条目是存储在哈希表条目中的key与用于访问哈希表的key相匹配的条目，如果左右哈希表中的条目不匹配，则在布隆过滤器中匹配的下一个最长前缀长度用于访问FIB表中的新条目，重复此过程，直到条目匹配。</p><p>如果布隆过滤器数组的大小正确，则误报率可能低于5%，假设一个IPv4前缀长度表通常平均包含大约8个前缀，那么理论上需要读取FIB表的最大次数为1.4(1+8*0.05)。它少于在所有其他方案中需要访问FIB结构的次数，对于IPv6，由于前缀范围更大，可以将前缀长度聚合为前缀范围，在继续探测该范围内的前缀长度前，可以探测一个单独的布隆过滤器数组以查看哪个最大前缀长度范围有匹配。</p><p>使用布隆过滤器来减少访问中央FIB结构有几个优点。数据移动减少，因为评价而言每个LPM访问需要大约1.4次内存访问，但是与任何哈希表一样，如果表过载过多，则会导致哈希冲突，并且对软件需要重新平衡条目，与其他机制一样，片上内存是有限的。可以将查找的所有哈希表保存在外部存储器中以实现更大的规模，但是为了通过哈希表的外部存储访问来维持线速，通常使用大型片上高速缓存来保持芯片上经常访问的路由。</p><p>布隆过滤器方法减少了中央或外部存储器FIB表读取的数量，代价是每个处理管道的布隆过滤器位阵列，虽然由于添加了布隆过滤器逻辑，整体性能可能会更好，但是由于额外的布隆过滤器阵列，与混合方法相比，这种方法在该领域可能没有那么优越，哈希表还需要20%的额外条目来减少哈希冲突，但是，在混合方法中存在类似的低效率，其中阶段1~2中的节点可能基于路由模式稀疏地填充。</p><h3 id="缓存频繁访问fib条目"><a class="markdownIt-Anchor" href="#缓存频繁访问fib条目"></a> 缓存频繁访问FIB条目</h3><p>在所有方法中，每个级别的本地缓存层次结构可以用于减少查找、片上和外部存储访问的数量，这些缓存的有效性在很大程度上取决于流量模式、活动路由的数量以及添加/删除新路由的速率。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>最有效的实现最长前缀匹配被认为是网络芯片的圣杯，随着互联网表项的快速增长，以及每秒数十亿数据包流经网络芯片，LPM继续挑战网络芯片架构师，随着摩尔定律的终结，片上存储器几乎无法在新工艺节点中扩展，并且外部存储器超额使用，因此减少存储器占用空间和进行LPM的带宽要求变得更要重要，我们已经讨论了几种流行实现方法。</p><p>对于每秒需要数十亿次LPM查找的高端路由器，基于混合和布隆过滤器的方法更受欢迎，因此它们的规模和总体上更确定的完成时间，除了加快LPM的硬件创新外，控制平面中的路由表压缩(在路由更新时可以聚合前缀)也有助于减少FIB表的内存占用并减少外部内存访问。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文源自Juniper工程师关于LPM最长匹配从算法到芯片实现上的一篇博文，个人觉得讲解的不错，简单翻译了一下，有兴趣也可去翻墙去看原文&lt;a href=&quot;https://www.linkedin.com/pulse/longest-prefix-matching-networking-chips-sharada-yeluri/%E3%80%82&quot;&gt;https://www.linkedin.com/pulse/longest-prefix-matching-networking-chips-sharada-yeluri/。&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="network" scheme="https://xiaohuiluo.github.io/categories/network/"/>
    
    <category term="网络" scheme="https://xiaohuiluo.github.io/categories/network/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="lpm" scheme="https://xiaohuiluo.github.io/tags/lpm/"/>
    
    <category term="最长匹配" scheme="https://xiaohuiluo.github.io/tags/%E6%9C%80%E9%95%BF%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Mptcp linux kernel implementation</title>
    <link href="https://xiaohuiluo.github.io/2022/11/28/mptcp%20linux%20kernel%20implementation/"/>
    <id>https://xiaohuiluo.github.io/2022/11/28/mptcp%20linux%20kernel%20implementation/</id>
    <published>2022-11-28T03:19:15.000Z</published>
    <updated>2025-01-23T02:33:47.132Z</updated>
    
    <content type="html"><![CDATA[<p>最近做一些多路径相关研究，主要有mptcp和mpquic两种方式，多路径最终在于解决3个问题：<strong>多条路径如何建立</strong>、<strong>多条路径如何分配数据包</strong>以及<strong>多条路径如何做好拥塞控制</strong>。</p><span id="more"></span><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221206-152028.png" alt="multi-path" /></p><p>这里介绍一下mptcp，mptcp linux内核实现针对多路径问题分为如下三个核心部分，使用mptcp时根据不同使用场景对其进行不同的配置是很有必要的。</p><blockquote><ol><li>path manager : 路径管理</li><li>scheduler control : 调度控制算法</li><li>congestion control : 拥塞控制算法</li></ol></blockquote><h2 id="path-manager"><a class="markdownIt-Anchor" href="#path-manager"></a> path manager</h2><h3 id="path-manager分析"><a class="markdownIt-Anchor" href="#path-manager分析"></a> path manager分析</h3><p>Linux最新mptcp_v0.95实现中一共包含如下4种路径管理(subflow)机制,还有一种默认dummy(啥都不做)路径管理。</p><blockquote><ol><li>Full-Mesh</li><li>ndiff-ports</li><li>Binder</li><li>Netlink</li><li>dummy(默认)</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">config MPTCP_FULLMESH</span><br><span class="line">tristate <span class="string">&quot;MPTCP Full-Mesh Path-Manager&quot;</span></span><br><span class="line">depends on MPTCP=y</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">  This path-management module will create a full-mesh among all IP-addresses.</span><br><span class="line"></span><br><span class="line">config MPTCP_NDIFFPORTS</span><br><span class="line">tristate <span class="string">&quot;MPTCP ndiff-ports&quot;</span></span><br><span class="line">depends on MPTCP=y</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">  This path-management module will create multiple subflows between the same</span><br><span class="line">  pair of IP-addresses, modifying the source-port. You can <span class="built_in">set</span> the number</span><br><span class="line">  of subflows via the mptcp_ndiffports-sysctl.</span><br><span class="line"></span><br><span class="line">config MPTCP_BINDER</span><br><span class="line">tristate <span class="string">&quot;MPTCP Binder&quot;</span></span><br><span class="line">depends on (MPTCP=y)</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">  This path-management module works like ndiffports, and adds the sysctl</span><br><span class="line">  option to <span class="built_in">set</span> the gateway (and/or path to) per each additional subflow</span><br><span class="line">  via Loose Source Routing (IPv4 only).</span><br><span class="line"></span><br><span class="line">config MPTCP_NETLINK</span><br><span class="line">tristate <span class="string">&quot;MPTCP Netlink Path-Manager&quot;</span></span><br><span class="line">depends on MPTCP=y</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">  This path-management module is controlled over a Netlink interface. A userspace</span><br><span class="line">  module can therefore control the establishment of new subflows and the policy</span><br><span class="line">  to apply over those new subflows <span class="keyword">for</span> every connection.</span><br></pre></td></tr></table></figure><h3 id="path-manager配置"><a class="markdownIt-Anchor" href="#path-manager配置"></a> path manager配置</h3><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221206-152355.png" alt="path-manager" /></p><p><code>sysctl net.mptcp.mptcp_path_manager=default/fullmesh/ndiffports/binder/netlink</code></p><h2 id="scheduler-control"><a class="markdownIt-Anchor" href="#scheduler-control"></a> scheduler control</h2><h3 id="scheduler分析"><a class="markdownIt-Anchor" href="#scheduler分析"></a> scheduler分析</h3><p>Linux最新mptcp_v0.95实现中一共包含如下4种多路径调度算法，默认使用minRTT调度算法。</p><blockquote><ol><li>minRTT(默认)</li><li>Round-Robin</li><li>Redundant</li><li>BLEST(实验阶段)</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">config DEFAULT_SCHEDULER</span><br><span class="line">bool <span class="string">&quot;Default&quot;</span></span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">  This is the default scheduler, sending first on the subflow</span><br><span class="line">  with the lowest RTT.</span><br><span class="line"></span><br><span class="line">config DEFAULT_ROUNDROBIN</span><br><span class="line">bool <span class="string">&quot;Round-Robin&quot;</span> <span class="keyword">if</span> MPTCP_ROUNDROBIN=y</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">  This is the round-rob scheduler, sending <span class="keyword">in</span> a round-robin</span><br><span class="line">  fashion..</span><br><span class="line"></span><br><span class="line">config DEFAULT_REDUNDANT</span><br><span class="line">bool <span class="string">&quot;Redundant&quot;</span> <span class="keyword">if</span> MPTCP_REDUNDANT=y</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">  This is the redundant scheduler, sending packets redundantly over</span><br><span class="line">  all the subflows.</span><br><span class="line">config MPTCP_BLEST</span><br><span class="line">tristate <span class="string">&quot;MPTCP BLEST&quot;</span></span><br><span class="line">depends on MPTCP=y</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">    This is an experimental BLocking ESTimation-based (BLEST) scheduler.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="scheduler配置"><a class="markdownIt-Anchor" href="#scheduler配置"></a> scheduler配置</h3><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221206-154231.png" alt="scheduler" /></p><p><code>sysctl net.mptcp.mptcp_scheduler=default/roundrobin/redundant/blest</code></p><p><a href="https://ieeexplore.ieee.org/document/7497206"><code>BLEST</code> https://ieeexplore.ieee.org/document/7497206</a></p><h2 id="congestion-control"><a class="markdownIt-Anchor" href="#congestion-control"></a> congestion control</h2><h3 id="congestion-control分析"><a class="markdownIt-Anchor" href="#congestion-control分析"></a> congestion control分析</h3><p>Linux最新mptcp_v0.95实现中一共包含如下5种mptcp拥塞算法，还有很多种tcp拥塞算法，默认使用cubic算法，安装github生成安装包及使用mptcp内核并不会默认使用mptcp相关拥塞算法，需要自己加载进内核并启用mptcp拥塞算法，有的新版本支持特性可能需要自己配置linux内核并重新编译。</p><blockquote><ol><li>LIA</li><li>OLIA</li><li>WVEGAS</li><li>BALIA</li><li>MCTCPDESYNC</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">config TCP_CONG_LIA</span><br><span class="line">tristate <span class="string">&quot;MPTCP Linked Increase&quot;</span></span><br><span class="line">depends on MPTCP</span><br><span class="line">default n</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">MultiPath TCP Linked Increase Congestion Control</span><br><span class="line">To <span class="built_in">enable</span> it, just put <span class="string">&#x27;lia&#x27;</span> <span class="keyword">in</span> tcp_congestion_control</span><br><span class="line"></span><br><span class="line">config TCP_CONG_OLIA</span><br><span class="line">tristate <span class="string">&quot;MPTCP Opportunistic Linked Increase&quot;</span></span><br><span class="line">depends on MPTCP</span><br><span class="line">default n</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">MultiPath TCP Opportunistic Linked Increase Congestion Control</span><br><span class="line">To <span class="built_in">enable</span> it, just put <span class="string">&#x27;olia&#x27;</span> <span class="keyword">in</span> tcp_congestion_control</span><br><span class="line"></span><br><span class="line">config TCP_CONG_WVEGAS</span><br><span class="line">tristate <span class="string">&quot;MPTCP WVEGAS CONGESTION CONTROL&quot;</span></span><br><span class="line">depends on MPTCP</span><br><span class="line">default n</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">wVegas congestion control <span class="keyword">for</span> MPTCP</span><br><span class="line">To <span class="built_in">enable</span> it, just put <span class="string">&#x27;wvegas&#x27;</span> <span class="keyword">in</span> tcp_congestion_control</span><br><span class="line"></span><br><span class="line">config TCP_CONG_BALIA</span><br><span class="line">tristate <span class="string">&quot;MPTCP BALIA CONGESTION CONTROL&quot;</span></span><br><span class="line">depends on MPTCP</span><br><span class="line">default n</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">Multipath TCP Balanced Linked Adaptation Congestion Control</span><br><span class="line">To <span class="built_in">enable</span> it, just put <span class="string">&#x27;balia&#x27;</span> <span class="keyword">in</span> tcp_congestion_control</span><br><span class="line"></span><br><span class="line">config TCP_CONG_MCTCPDESYNC</span><br><span class="line">tristate <span class="string">&quot;DESYNCHRONIZED MCTCP CONGESTION CONTROL (EXPERIMENTAL)&quot;</span></span><br><span class="line">depends on MPTCP</span><br><span class="line">default n</span><br><span class="line">---<span class="built_in">help</span>---</span><br><span class="line">Desynchronized MultiChannel TCP Congestion Control. This is experimental</span><br><span class="line">code that only supports single path and must have <span class="built_in">set</span> mptcp_ndiffports</span><br><span class="line">larger than one.</span><br><span class="line">To <span class="built_in">enable</span> it, just put <span class="string">&#x27;mctcpdesync&#x27;</span> <span class="keyword">in</span> tcp_congestion_control</span><br><span class="line">For further details see:</span><br><span class="line">  http://ieeexplore.ieee.org/abstract/document/6911722/</span><br><span class="line">  https://doi.org/10.1016/j.comcom.2015.07.010</span><br></pre></td></tr></table></figure><h3 id="congestion-control配置"><a class="markdownIt-Anchor" href="#congestion-control配置"></a> congestion control配置</h3><p><img src="https://gitee.com/martrix/blog-images/raw/master/img/20221206-154302.png" alt="congestion control" /></p><p><code>sysctl net.ipv4.tcp_congestion_control=lia/olia/wvegas/balia/mctcpdesync</code></p><p><a href="https://datatracker.ietf.org/doc/rfc6356/"><code>lia</code> https://datatracker.ietf.org/doc/rfc6356/</a><br /><a href="https://datatracker.ietf.org/doc/draft-khalili-mptcp-congestion-control/"><code>olia</code> https://datatracker.ietf.org/doc/draft-khalili-mptcp-congestion-control/</a><br /><a href="http://tools.ietf.org/html/draft-xu-mptcp-congestion-control/"><code>wvegas</code> http://tools.ietf.org/html/draft-xu-mptcp-congestion-control/</a><br /><a href="https://datatracker.ietf.org/doc/draft-walid-mptcp-congestion-control/"><code>balia</code> https://datatracker.ietf.org/doc/draft-walid-mptcp-congestion-control/</a><br /><a href="https://ieeexplore.ieee.org/abstract/document/6911722/"><code>DMCTCP</code> https://ieeexplore.ieee.org/abstract/document/6911722/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近做一些多路径相关研究，主要有mptcp和mpquic两种方式，多路径最终在于解决3个问题：&lt;strong&gt;多条路径如何建立&lt;/strong&gt;、&lt;strong&gt;多条路径如何分配数据包&lt;/strong&gt;以及&lt;strong&gt;多条路径如何做好拥塞控制&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="network" scheme="https://xiaohuiluo.github.io/categories/network/"/>
    
    <category term="网络" scheme="https://xiaohuiluo.github.io/categories/network/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="multipath" scheme="https://xiaohuiluo.github.io/tags/multipath/"/>
    
    <category term="mptcp" scheme="https://xiaohuiluo.github.io/tags/mptcp/"/>
    
    <category term="linux" scheme="https://xiaohuiluo.github.io/tags/linux/"/>
    
    <category term="多路径" scheme="https://xiaohuiluo.github.io/tags/%E5%A4%9A%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
</feed>
